{
  "hash": "862948836af4985d0a550d3ea3d06d82",
  "result": {
    "markdown": "---\ntitle: \"Minnesota State High School Boys Hockey Predictions\"\nauthor: \"Andy\"\ndate: 2018-03-03\ncategories: [\"Hockey\", \"Elo\", \"R\"]\n---\n\n\nThe state high school boys hockey tournament, scheduled for March 7&ndash;10, is one of the premiere sporting events in the state of Minnesota. According to [Wikipedia](https://en.wikipedia.org/wiki/High_school_boys_ice_hockey_in_Minnesota), this event has drawn over 100,000 spectators 22 times in its history, eclipsing 135,000 spectoators in 2015. Many national caliber players played high school hockey in Minnesota, several taking part in the state tournament. Names like Neal Broten, Herb Brooks, and T. J. Oshie are alumni of state tournaments past.\n\nMinnesota high school hockey teams are split into two classes based on school enrollment sizes; the largest 64 schools are classified as Class AA and the remainder are classified as Class A. Each of these classes are subdivided into eight sections. (Sections are based on a combination of school location and competitivness.)\n\nThis year's state tournament features 16 teams (8 from Class A and 8 from Class AA) that qualified for the tournament by winning their section tournament. Within each class, the top five teams are seeded (ranked) by the coaches of the teams that qualified for the state tournament. The \\#4 and \\#5 seeds play each other and the remaining three teams in each class are assigned by lottery to play the \\#1, \\#2, and \\#3 seeded teams. The seeds in the 2018 tournament, announced on March 3, are:\n\n\n::: {.cell}\n::: {.cell-output-display}\nTable: Top eight seeds based on the 2018 state tournament bracket. The 6&ndash;8 seeds are based on the opponents the teams were assigned to in the lottery.\n\n| Seed |A                        |AA                             |\n|:----:|:------------------------|:------------------------------|\n|  1   |Hermantown               |Minnetonka                     |\n|  2   |Mahtomedi                |Edina                          |\n|  3   |Orono                    |Duluth East                    |\n|  4   |Alexandria               |St. Thomas Academy             |\n|  5   |Thief River Falls        |Centennial                     |\n|  6   |Litchfield/Dassel-Cokato |St. Michael-Albertville (STMA) |\n|  7   |Mankato East/Loyola      |Lakeville North                |\n|  8   |Monticello               |Hill-Murray                    |\n:::\n:::\n\n\nI wanted to make compute probabilities, &agrave; la fivethirtyeight, for which each team's chances of winning the state tournament. The methodology I used to do this was:\n\n- Use the regular season and section tournament game data to compute Elo ratings for all the teams.\n- Use these Elo rating to simulate 10,000 state tournament winners.\n- Each team's probability of winning was then computed as the proportion of times that team won the tournament in the simulation. \n\n## Scraping the Game-Level Data\n\nTo begin, I had to obtain the game data for both the regular season and the section tournaments. [MN Hockey Hub](http://www.mnhockeyhub.com/) is a website that has the results for all high school hockey games played in Minnesota. I used the **rvest** package to scrape these data. Unfortunately, MN Hockey Hub separates their regular season and section playoffs, so I had to run the scrape on each separately and then combine the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Beginning and ending dates for regular season games\nstart = as.Date(\"2017/11/22\", format = \"%Y/%m/%d\")\nend   = as.Date(\"2018/02/17\",format=\"%Y/%m/%d\")\n\n# Create an empty list with 101 elements\nresults = rep(list(NA), 88) \n\n# Initialize values\ntheDate = start\ni = 1\n\n# Loop over dates\nwhile (theDate <= end){\n  url = paste0(\"http://www.mnhockeyhub.com/schedule/day/league_instance/60876/\",\n               format(theDate,\"%Y/%m/%d\"),\n              \"?subseason=434877&referrer=3596811\"\n               )\n  \n  results[[i]] = as.data.frame(\n    url %>% \n      read_html() %>% \n      html_table()\n    ) %>% \n    mutate(date = theDate)\n  theDate = theDate + 1 \n  i = i + 1\n}\n\n## Scrape section games\nstart = as.Date(\"2018/02/17\", format = \"%Y/%m/%d\")\nend   = as.Date(\"2018/03/02\",format=\"%Y/%m/%d\")\nresults2 = rep(list(NA), 14) \ntheDate = start\ni = 1\n\nwhile (theDate <= end){\n  url = paste0(\"http://www.mnhockeyhub.com/schedule/day/league_instance/60876/\",\n               format(theDate,\"%Y/%m/%d\"),\n               \"?subseason=486996\"\n  )\n  \n  results2[[i]] = as.data.frame(\n    url %>% \n      read_html() %>% \n      html_table()\n  ) %>% \n    mutate(date = theDate)\n  theDate = theDate + 1 \n  i = i + 1\n}\n```\n:::\n\n\nI then took these scraped data, and put them into a dataframe using `do.call()` and formatted the data frame using **dplyr** functions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Transform lists to data frames\nhockey_reg_season = do.call(rbind, results)\nhockey_sections = do.call(rbind, results2)\n\n# Format the data\nlibrary(dplyr)\n\nhockey = rbind(hockey_reg_season, hockey_sections) %>%\n  select(date,\n         home = Home,\n         home_score = H,\n         visitor = Visitor,\n         visitor_score = V,\n         location = Location\n  ) %>%\n  mutate(\n    home_score = as.integer(home_score),\n    visitor_score = as.integer(visitor_score)\n  ) %>%\n  tidyr::drop_na()\n```\n:::\n\n\nAt this point I did a data integrity check. The first thing I noticed was that there were games in the data on every day from the start of the regular season through the section playoffs. I knew somethibng was wrong as high school teams do not play games on Sundays or on holidays. In looking at those days, it turned out the web scraper just duplicated games from future days (e.g., there was no game on 12-25-2017, so it just skipped ahead to the next day a game was played, 12-26-2017, and put those games in the December 25th date. It then also put them in the 12-26-2017 date as well.) Rather than try to program a solution in R, I outputted the data to a CSV file and manually removed the few dates that there were no games played.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2,047 × 7\n   date     home               home_score visitor  visitor_score location season\n   <chr>    <chr>                   <dbl> <chr>            <dbl> <chr>    <chr> \n 1 11/22/17 Anoka                       4 Rogers               1 Anoka A… Regul…\n 2 11/22/17 Providence Academy          2 Spring …             3 Plymout… Regul…\n 3 11/22/17 St. Paul Academy            3 Bloomin…             2 Drake A… Regul…\n 4 11/24/17 Armstrong/Cooper           10 Proctor              0 Chisago… Regul…\n 5 11/24/17 Baldwin-Woodville           2 St. Pau…             4 Amery I… Regul…\n 6 11/24/17 Eastview                    5 Park of…             3 Apple V… Regul…\n 7 11/24/17 Orono                       5 East Gr…             3 Orono I… Regul…\n 8 11/24/17 Greenway                    5 Mound W…             3 Hodgins… Regul…\n 9 11/24/17 Minnesota River             2 North B…             8 Turkey … Regul…\n10 11/24/17 Edina                       7 Holy Fa…             0 Plymout… Regul…\n# ℹ 2,037 more rows\n```\n:::\n:::\n\n\n## Compute Elo Ratings\n\nAfter scraping and formatting the data, I used the **elo** package to compute Elo ratings. The [package vignette](https://cran.r-project.org/web/packages/elo/vignettes/elo.html) is helpful for understanding the syntax used to fit different Elo models. The `elo.run()` function initializes each team's Elo rating to 1500, and then updates each team's rating after every game played based on whether the team won or lost. In the model I fitted, I also accounted for the score differential.\n\nThe rate at which each team's Elo rating changes based on a win or loss is referred to as the $K$-factor. Larger values of $K$ have a bigger change in the Elo rating. I didn't think that result of any one hockey game should impact the rating too greatly, so I chose a $K$-factor of 15. Rather than set this to a constant value for each game, the model I used adjusted this factor based on the score differential, mathematically,\n\n$$\n15 \\times \\ln(| \\mathrm{Score}_{\\mathrm{Home}} - \\mathrm{Score}_{\\mathrm{Visitor}} |) + 1\n$$\n\nTaking the natural logarithm helps to lessen the impact of games where one team runs up the score on another team. \n\nI also considered whether Elo ratings needed to take into account a home ice advantage. The empirical data indicated that the home team in the 2017&ndash;2018 season did not have an advantage, winning about 48\\% of the games played. Thus, ultimately, I decided not to include any home ice advantage (or disadvantage).\n\nSince during the regular season teams play games with other teams that are in other classes, I opted to fit one model taht included teams from both classes rather than fit the model within class.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(elo)\nelo_reg_season = elo.run(score(home_score, visitor_score) ~ home + visitor +\n                    k(15*log(abs(home_score - visitor_score) + 1)), data = hockey)\n```\n:::\n\n\nThe final Elo ratings and rankings for teams that qualified for the state tournament are shown below.\n\n\n::: {.cell}\n::: {.cell-output-display}\nTable: Elo ratings and rankings for the eight Class A teams that qualified for the state tournament.\n\n|Team                     |   Elo    | Rank |\n|:------------------------|:--------:|:----:|\n|Hermantown               | 1639.196 |  11  |\n|Mahtomedi                | 1624.538 |  17  |\n|Orono                    | 1609.513 |  24  |\n|Alexandria               | 1587.179 |  31  |\n|Thief River Falls        | 1571.198 |  39  |\n|Litchfield/Dassel-Cokato | 1562.803 |  42  |\n|Mankato East             | 1551.141 |  48  |\n|Monticello               | 1530.773 |  60  |\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\nTable: Elo ratings and rankings for the eight Class AA teams that qualified for the state tournament.\n\n|Team               |   Elo    | Rank |\n|:------------------|:--------:|:----:|\n|Minnetonka         | 1718.589 |  1   |\n|Edina              | 1716.570 |  2   |\n|Duluth East        | 1693.757 |  3   |\n|St. Thomas Academy | 1691.315 |  4   |\n|Centennial         | 1655.561 |  7   |\n|STMA               | 1625.291 |  16  |\n|Lakeville North    | 1578.414 |  38  |\n|Hill-Murray        | 1557.501 |  46  |\n:::\n:::\n\n\nComparing these to the actual tournament seeds, we see several differences in the top four seeds. In Class A, the coaches included Alexandria in the top five, while our Elo model put Monticello in the top four. In Class AA, the Elo model and the coaches selected the same top five teams, but had a different rank ordering for those teams. There are also some ranking differences between the coaches picks and our Elo model for the other teams. \n\n\n\n## Simulate the State Tournament\n\nWe can now use these Elo ratings to determine the probability that one team would beat another. For example, in the Class A quarterfinal game between Hermantown (\\#1) and Monticello (\\#8), Hermantown's probability of beating Monticello is 0.574 .\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredict(elo_reg_season, data.frame(home = \"Hermantown\", visitor = \"Monticello\"))\n```\n:::\n\n\nI simulated the state tournament by using a random-number generator to determine the winner of each game. For instance, to simulate the Hermantown/Monticello game, I used the `runif()` function to generate a random number drawn from the uniform distribution between 0 and 1. If the result is less than or equal to 0.574, Hermantown is the winner; if not, Monticello wins. The syntax for simulating the Class A state tournament 10,000 times is below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter teams in rank order\nteam_1 = \"Hermantown\"\nteam_2 = \"Mahtomedi\"\nteam_3 = \"Orono\"\nteam_4 = \"Alexandria\"\nteam_5 = \"Thief River Falls\"\nteam_6 = \"Litchfield/Dassel-Cokato\"\nteam_7 = \"Mankato East\"\nteam_8 = \"Monticello\"\n\n# Set up empty vector to store winner in\nchampion = rep(NA, 10000)\n\n\nfor(i in 1:10000){\n  \n  ### SIMULATE THE QUARTEFINALS\n  \n  # Predict Game 1 winner: team_1 vs. team_8\n  p_game_1 = predict(elo_reg_season, data.frame(home = team_1, visitor = team_8))\n  w_game_1 = ifelse(runif(1, min = 0, max = 1) <= p_game_1, team_1, team_8)\n  \n  # Predict Game 2 winner: team_4 vs. team_4\n  p_game_2 = predict(elo_reg_season, data.frame(home = team_4, visitor = team_5))\n  w_game_2 = ifelse(runif(1, min = 0, max = 1) <= p_game_2, team_4, team_5)\n  \n  # Predict Game 3 winner: team_3 vs. team_6\n  p_game_3 = predict(elo_reg_season, data.frame(home = team_3, visitor = team_6))\n  w_game_3 = ifelse(runif(1, min = 0, max = 1) <= p_game_3, team_3, team_6)\n  \n  # Predict Game 4 winner: team_2 vs. team_7\n  p_game_4 = predict(elo_reg_season, data.frame(home = team_2, visitor = team_7))\n  w_game_4 = ifelse(runif(1, min = 0, max = 1) <= p_game_4, team_2, team_7)\n  \n  \n  ### SIMULATE THE SEMIFINALS\n  \n  # Predict Game 5 winner: winner Game 1 vs. winner Game 2\n  p_game_5 = predict(elo_reg_season, data.frame(home = w_game_1, visitor = w_game_2))\n  w_game_5 = ifelse(runif(1, min = 0, max = 1) <= p_game_5, w_game_1, w_game_2)\n  \n  # Predict Game 6 winner: winner Game 3 vs. winner Game 4\n  p_game_6 = predict(elo_reg_season, data.frame(home = w_game_4, visitor = w_game_3))\n  w_game_6 = ifelse(runif(1, min = 0, max = 1) <= p_game_6, w_game_4, w_game_3)\n  \n  \n  ### SIMULATE THE FINALS\n  \n  # Predict Game 5 winner: winner Game 1 vs. winner Game 2\n  p_game_7 = predict(elo_reg_season, data.frame(home = w_game_5, visitor = w_game_6))\n  w_game_7 = ifelse(runif(1, min = 0, max = 1) <= p_game_7, w_game_5, w_game_6)\n  \n  champion[i] = w_game_7\n  \n}\n```\n:::\n\n\nNow I can compute the proportion of times each team \"won\" the state tournament.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata.frame(champion) %>% \n  group_by(champion) %>%\n  summarize(Probability = length(champion)/10000) %>%\n  arrange(desc(Probability))\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\nTable: Probability that each of the eight Class A teams will win the state tournament.\n\n|Team                     | Probability |\n|:------------------------|:-----------:|\n|Hermantown               |   0.1987    |\n|Mahtomedi                |   0.1802    |\n|Orono                    |   0.1612    |\n|Alexandria               |   0.1127    |\n|Thief River Falls        |   0.1086    |\n|Litchfield/Dassel-Cokato |   0.0939    |\n|Mankato East             |   0.0812    |\n|Monticello               |   0.0635    |\n:::\n:::\n\n\nBased on these simulations, Mahtomedi, Hermantown and Orono all have about an equal chance of winning the Class A tournament.\n\nI also carried out a similar simulation for the Class AA tournament.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter teams in rank order\nteam_1 = \"Minnetonka\"\nteam_2 = \"Edina\"\nteam_3 = \"Duluth East\"\nteam_4 = \"St. Thomas Academy\"\nteam_5 = \"Centennial\"\nteam_6 = \"STMA\"\nteam_7 = \"Lakeville North\"\nteam_8 = \"Hill-Murray\"\n\n# Set up empty vector to store winner in\nchampion2 = rep(NA, 10000)\n\n\nfor(i in 1:10000){\n  \n  ### SIMULATE THE QUARTEFINALS\n  \n  # Predict Game 1 winner: team_1 vs. team_8\n  p_game_1 = predict(elo_reg_season, data.frame(home = team_1, visitor = team_8))\n  w_game_1 = ifelse(runif(1, min = 0, max = 1) <= p_game_1, team_1, team_8)\n  \n  # Predict Game 2 winner: team_4 vs. team_4\n  p_game_2 = predict(elo_reg_season, data.frame(home = team_4, visitor = team_5))\n  w_game_2 = ifelse(runif(1, min = 0, max = 1) <= p_game_2, team_4, team_5)\n  \n  # Predict Game 3 winner: team_3 vs. team_6\n  p_game_3 = predict(elo_reg_season, data.frame(home = team_3, visitor = team_6))\n  w_game_3 = ifelse(runif(1, min = 0, max = 1) <= p_game_3, team_3, team_6)\n  \n  # Predict Game 4 winner: team_2 vs. team_7\n  p_game_4 = predict(elo_reg_season, data.frame(home = team_2, visitor = team_7))\n  w_game_4 = ifelse(runif(1, min = 0, max = 1) <= p_game_4, team_2, team_7)\n  \n  \n  ### SIMULATE THE SEMIFINALS\n  \n  # Predict Game 5 winner: winner Game 1 vs. winner Game 2\n  p_game_5 = predict(elo_reg_season, data.frame(home = w_game_1, visitor = w_game_2))\n  w_game_5 = ifelse(runif(1, min = 0, max = 1) <= p_game_5, w_game_1, w_game_2)\n  \n  # Predict Game 6 winner: winner Game 3 vs. winner Game 4\n  p_game_6 = predict(elo_reg_season, data.frame(home = w_game_4, visitor = w_game_3))\n  w_game_6 = ifelse(runif(1, min = 0, max = 1) <= p_game_6, w_game_4, w_game_3)\n  \n  \n  ### SIMULATE THE FINALS\n  \n  # Predict Game 5 winner: winner Game 1 vs. winner Game 2\n  p_game_7 = predict(elo_reg_season, data.frame(home = w_game_5, visitor = w_game_6))\n  w_game_7 = ifelse(runif(1, min = 0, max = 1) <= p_game_7, w_game_5, w_game_6)\n  \n  champion2[i] = w_game_7\n  \n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata.frame(champion2) %>% \n  group_by(champion2) %>%\n  summarize(Probability = length(champion2)/10000) %>%\n  arrange(desc(Probability))\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\nTable: Probability that each of the eight Class AA teams will win the state tournament.\n\n|Team               | Probability |\n|:------------------|:-----------:|\n|Minnetonka         |   0.2098    |\n|Edina              |   0.2083    |\n|Duluth East        |   0.1852    |\n|St. Thomas Academy |   0.1495    |\n|Centennial         |   0.1016    |\n|STMA               |   0.0701    |\n|Lakeville North    |   0.0416    |\n|Hill-Murray        |   0.0339    |\n:::\n:::\n\n\nThe simulation results suggest that both Edina and St. Thomas Academy have a pretty good shot of winning the tournament, and Minnetonka and Duluth East are also in the mix.\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}