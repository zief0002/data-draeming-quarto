---
title: "Minnesota State High School Boys Hockey Predictions (Updated Quarterfinals)"
author: "~"
date: 2018-03-08
categoriess: ["Hockey", "Elo", "R"]
---

In a [previous post](/post/2018-03-03-boys-hockey/), I used Monte Carlo simulation to predict the winner of the 2018 Minnesota State High School Boys Hockey tournament. Now that the quarterfinal games have been played, I thought I would update my predictions. The process for this is to: 

- Update the Elo ratings based on the quarterfinal games;
- Re-simulate the tournament 

I simulated the Class A state tournament 10,000 times using the same process as described in my [previous post](/post/2018-03-03-boys-hockey/).


## Class A Tournament

```{r echo=FALSE, message=FALSE, eval=FALSE}
library(dplyr)
library(elo)

hockey = readr::read_csv("~/Documents/data/mn-hockey-boys-2018-03-09.csv") %>%
  filter(date != "3/9/18")
elo_reg_season = elo.run(score(home_score, visitor_score) ~ home + visitor +
                    k(15*log(abs(home_score - visitor_score) + 1)), data = hockey)
e = data.frame(final.elos(elo_reg_season))
names(e) = "Elo"
     
class_a = e %>% 
  mutate(Team = row.names(e)) %>% 
  arrange(desc(Elo)) %>%
  filter(Team %in% c("Hermantown", "Mahtomedi", "Orono", "Alexandria", "Thief River Falls", "Litchfield/Dassel-Cokato", "Mankato East", "Monticello")) %>%
  mutate(Elo_old = c(1639.196, 1624.538, 1609.513, 1587.179, 1571.198, 1562.803, 1551.141, 1530.773)) %>%
  select(Team, 'Original Elo' = Elo_old, 'Updated Elo' = Elo)
```


```{r echo=FALSE, message=FALSE}
library(tidyverse)
library(knitr)

e = data.frame(
  team = c("Hermantown", "Orono", "Mahtomedi", "Alexandria", "Monticello", "Thief River Falls", 
           "Mankato East", "Litchfield/Dassel-Cokato"),
  orig = c(1639.196, 1624.538, 1609.513, 1587.179, 1571.198, 1562.803, 1551.141, 1530.773),
  update = c(1657.756, 1624.505, 1619.517, 1571.723, 1569.096, 1568.797, 1549.453, 1515.494)
)

     

knitr::kable(e, 
             caption = "Original (at beginning of tournament) and updated Elo ratings (after the quartefinal games) for the eight Class A teams that qualified for the state tournament.", 
             align = c("l", "c", "c"),
             col.names = c("Team", "Original Elo", "Updated Elo")
             )
```




```{r a_main_bracket, eval=FALSE}
# Enter teams in rank order
team_1 = "Hermantown"
team_2 = "Mahtomedi"
team_3 = "Orono"
team_4 = "Alexandria"


# Set up empty vector to store winner in
champion = rep(NA, 10000)


for(i in 1:10000){
  
  ### SIMULATE THE SEMIFINALS
  
  # Predict Game 1 winner: team_1 vs. team_4
  p_game_1 = predict(elo_reg_season, data.frame(home = team_1, visitor = team_4))
  w_game_1 = ifelse(runif(1, min = 0, max = 1) <= p_game_1, team_1, team_4)
  
  # Predict Game 2 winner: team_2 vs. team_3
  p_game_2 = predict(elo_reg_season, data.frame(home = team_2, visitor = team_3))
  w_game_2 = ifelse(runif(1, min = 0, max = 1) <= p_game_2, team_2, team_3)
  
  
  ### SIMULATE THE FINALS
  
  # Predict Game 3 winner: winner Game 1 vs. winner Game 2
  p_game_3 = predict(elo_reg_season, data.frame(home = w_game_1, visitor = w_game_2))
  w_game_3 = ifelse(runif(1, min = 0, max = 1) <= p_game_3, w_game_1, w_game_2)
  
  
  champion[i] = w_game_3
  
}
```


```{r echo=FALSE, eval=FALSE}
A = data.frame(champion) %>% 
  group_by(champion) %>%
  summarize(Probability = length(champion)/10000) %>%
  arrange(desc(Probability)) %>%
  mutate(old_prob = c(0.1987, 0.1802, 0.1127, 0.1086)) %>%
  select(champion, old_prob, Probability)

out = data.frame(
  champion = c("Monticello", "Thief River Falls", "Mankato East", "Litchfield/Dassel-Cokato"),
  old_prob = c(0.1127, 0.0939, 0.0812, 0.0635),
  Probability = 0
)

A = rbind(A, out)
```

```{r echo=FALSE}
A = data.frame(
  team = c("Hermantown", "Orono", "Mahtomedi", "Alexandria", "Monticello", "Thief River Falls", 
           "Mankato East", "Litchfield/Dassel-Cokato"),
  orig = c(0.1987, 0.1802, 0.1127, 0.1086, 0.1127, 0.0939, 0.0812, 0.0635),
  update = c(0.3214, 0.2671, 0.2415, 0.1700, 0.0000, 0.0000, 0.0000, 0.0000)
)



knitr::kable(A, 
             caption = "Probability that each of the eight Class A teams will win the state tournament.", 
             align = c("l", "c"), 
             col.names = c("Team", "Original Probability", "Updated Probability"),
             )
```

Based on these simulations, Hermantown is still the favorite, and Mahtomedi and Orono also have a chance of winning the Class A tournament. 

## Class AA Tournament

```{r echo=FALSE, eval=FALSE}
class_aa = e %>%
  mutate(Team = row.names(e)) %>%
  arrange(desc(Elo)) %>%
  mutate(Rank = 1:nrow(e)) %>%
  filter(Team %in% c("Edina", "St. Thomas Academy", "Minnetonka", "Duluth East", "STMA", "Centennial", "Lakeville North", "Hill-Murray")) %>%
  mutate(Elo_old = c(1718.589, 1716.570, 1691.315, 1693.757, 1655.561, 1625.291, 1578.414, 1557.501)) %>%
  select(Team, 'Old Elo' = Elo_old, 'Updated Elo' = Elo)
```

```{r echo=FALSE}
class_aa = data.frame(
  team = c("Edina", "Minnetonka", "St. Thomas Academy", "Duluth East", "STMA",
           "Centennial", "Lakeville North", "Hill-Murray"),
  orig = c(1718.589, 1716.570, 1691.315, 1693.757, 1655.561, 1625.291, 1578.414, 1557.501),
  update = c(1741.221, 1711.781, 1710.036, 1692.917, 1643.501, 1618.199, 1569.408, 1549.936)
)

knitr::kable(
  class_aa, 
  caption = "Elo ratings and rankings for the eight Class AA teams that qualified for the state tournament.", 
  align = c("l", "c", "c"),
  col.names = c("Team", "Original Elo", "Updated Elo")
  )
```



```{r aa_main_bracket, eval=FALSE}
# Enter teams in rank order
team_1 = "Minnetonka"
team_2 = "Edina"
team_3 = "Duluth East"
team_4 = "Centennial"


# Set up empty vector to store winner in
champion = rep(NA, 10000)


for(i in 1:10000){
  
  ### SIMULATE THE SEMIFINALS
  
  # Predict Game 1 winner: team_1 vs. team_4
  p_game_1 = predict(elo_reg_season, data.frame(home = team_1, visitor = team_4))
  w_game_1 = ifelse(runif(1, min = 0, max = 1) <= p_game_1, team_1, team_4)
  
  # Predict Game 2 winner: team_2 vs. team_3
  p_game_2 = predict(elo_reg_season, data.frame(home = team_2, visitor = team_3))
  w_game_2 = ifelse(runif(1, min = 0, max = 1) <= p_game_2, team_2, team_3)
  
  
  ### SIMULATE THE FINALS
  
  # Predict Game 3 winner: winner Game 1 vs. winner Game 2
  p_game_3 = predict(elo_reg_season, data.frame(home = w_game_1, visitor = w_game_2))
  w_game_3 = ifelse(runif(1, min = 0, max = 1) <= p_game_3, w_game_1, w_game_2)
  
  
  champion[i] = w_game_3
  
}
```


```{r echo=FALSE}
# AA = data.frame(champion) %>% 
#   group_by(champion) %>%
#   summarize(Probability = length(champion)/10000) %>%
#   arrange(desc(Probability)) %>%
#   mutate(old_prob = c(0.2083, 0.1852, 0.1495, 0.0701)) %>%
#   select(champion, old_prob, Probability)

# out = data.frame(
#   champion = c("St. Thomas Academy", "STMA", "Lakeville North", "Hill-Murray"),
#   old_prob = c(0.2098, 0.1016, 0.0416, 0.0339),
#   Probability = 0
# )

# AA = rbind(AA, out)

AA = data.frame(
  team = c("Edina", "Minnetonka", "St. Thomas Academy", "Duluth East", "STMA",
           "Centennial", "Lakeville North", 	"Hill-Murray"),
  orig = c(0.2083, 0.1852, 0.1495, 0.0701, 0.2098, 0.1016, 0.0416, 0.0339),
  update = c(0.3113, 0.2901, 0.2487, 0.1499, 0.0000, 0.0000, 0.0000, 0.0000)
)


knitr::kable(
  AA, 
  caption = "Probability that each of the eight Class AA teams will win the state tournament.", 
  align = c("l", "c"), 
  col.names = c("Team", "Original Probability", "Updated Probability")
  )
```

St. Thomas Academy's loss to Centennial really shook things up. Edina and Minnetonka are now the favorites in the Class AA tournament, with Duluth East a not so distant third.


